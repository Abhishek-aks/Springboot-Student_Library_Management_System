package com.LibraryManagementSystem.LMS.MVC_Service.impl;

import com.LibraryManagementSystem.LMS.DTO.RequestDto.AuthorRequestDto;
import com.LibraryManagementSystem.LMS.DTO.ResponseDto.AuthorResponseDto;
import com.LibraryManagementSystem.LMS.DTO.ResponseDto.StudentResponseDto;
import com.LibraryManagementSystem.LMS.Models.Author;
import com.LibraryManagementSystem.LMS.MVC_Dao.AuthorRepository;
import com.LibraryManagementSystem.LMS.MVC_Service.AuthorService;
import com.LibraryManagementSystem.LMS.Models.Student;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;



@Service
public class AuthorServiceimpl implements AuthorService {

    @Autowired
    AuthorRepository authorRepository;

// Since we are implementing the AuthorService so there method will get overridden so
    @Override
    public String addAuthor(AuthorRequestDto authorRequestDto) {
//before saving the paramenter check all the parameters are initialised/sorted or not
// id- autogenerated , name,age & email will be initialsed by author -json
// now list of book written aur the author is already set in the model.entity itself.
// finally save the data
        Author author = new Author();
        author.setName(authorRequestDto.getName());
        author.setMobileNo(authorRequestDto.getMobileNo());
        author.setEmail(authorRequestDto.getEmail());

        authorRepository.save(author);
        return "New Author Adder";
    }


    @Override
    public AuthorResponseDto getAuthorById(int id){
        Author author =authorRepository.findById(id).get();

        AuthorResponseDto authorResponseDto = new AuthorResponseDto();
        authorResponseDto.setAuthorId(author.getId());
        authorResponseDto.setName(author.getName());
        authorResponseDto.setMobileNo(author.getMobileNo());
        authorResponseDto.setEmail(author.getEmail());
        return authorResponseDto;

    }
    @Override
    public AuthorResponseDto getAuthorByEmail(String email){
        Author author = authorRepository.findByEmail(email);
    // this function does not exist in jpa by default so we needed to define in Repository.

        // prepare response dto
        AuthorResponseDto authorResponseDto =new AuthorResponseDto();
        authorResponseDto.setAuthorId(author.getId());
        authorResponseDto.setName(author.getName());
        authorResponseDto.setMobileNo(author.getMobileNo());
        authorResponseDto.setEmail(author.getEmail());
        return authorResponseDto;
    }

    @Override
    public  AuthorResponseDto updateName(int id, String name){
        Author author = authorRepository.findById(id).get();
        author.setName(name);
        Author updatedAuthor = authorRepository.save(author);

        AuthorResponseDto authorUpdatedResponseDto = new AuthorResponseDto();
        authorUpdatedResponseDto.setAuthorId(updatedAuthor.getId());
        authorUpdatedResponseDto.setName(updatedAuthor.getName());
        authorUpdatedResponseDto.setMobileNo(updatedAuthor.getMobileNo());
        authorUpdatedResponseDto.setEmail(updatedAuthor.getEmail());

        return  authorUpdatedResponseDto;
    }

    @Override
    public  AuthorResponseDto updateMobile(int id, String MobileNo){
        Author newAuthor = authorRepository.findById(id).get();
        newAuthor.setMobileNo(MobileNo);
        Author updateAuthor = authorRepository.save(newAuthor);

        AuthorResponseDto authorUpdatedResponseDto = new AuthorResponseDto();
        authorUpdatedResponseDto.setAuthorId(updateAuthor.getId());
        authorUpdatedResponseDto.setName(updateAuthor.getName());
        authorUpdatedResponseDto.setMobileNo(updateAuthor.getMobileNo());
        authorUpdatedResponseDto.setEmail(updateAuthor.getEmail());

        return  authorUpdatedResponseDto;
    }

    @Override
    public  AuthorResponseDto updateEmail(int id, String email){
        Author author = authorRepository.findById(id).get();
        author.setEmail(email);
        Author updatedAuthor = authorRepository.save(author);

        AuthorResponseDto authorUpdatedResponseDto = new AuthorResponseDto();
        authorUpdatedResponseDto.setAuthorId(updatedAuthor.getId());
        authorUpdatedResponseDto.setName(updatedAuthor.getName());
        authorUpdatedResponseDto.setMobileNo(updatedAuthor.getMobileNo());
        authorUpdatedResponseDto.setEmail(updatedAuthor.getEmail());

        return  authorUpdatedResponseDto;
    }

}
